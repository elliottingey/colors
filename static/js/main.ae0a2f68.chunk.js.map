{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["insertRandomColor","insertColor","Math","floor","random","toString","console","log","getHeaderElem","document","getElementById","getBodyElem","style","backgroundColor","resetColor","alert","ColorValSelection","useState","colorVal","setColorVal","className","onClick","right","left","App","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8LAwBA,SAASA,IAEP,IAAMC,EATY,IAAMC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAYpEC,QAAQC,IAAIN,GAEZ,IAAMO,EAAgBC,SAASC,eAAe,YACxCC,EAAcF,SAASC,eAAe,UAM5C,OAJAF,EAAcI,MAAMC,gBAAkBZ,EACtCU,EAAYC,MAAMC,gBAAkBZ,EAG7BA,EAMT,SAASa,IACP,IAAMH,EAAcF,SAASC,eAAe,UACtCF,EAAgBC,SAASC,eAAe,YAIJ,YAAtCC,EAAYC,MAAMC,iBACpBE,MAAM,2CAGRJ,EAAYC,MAAMC,gBAAkB,UACpCL,EAAcI,MAAMC,gBAAkB,UA2BxC,SAASG,IACP,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAcA,OACF,gCACE,qBAAIC,UAAU,WAAd,kCAA+CF,KAC/C,gCACE,wBAAQE,UAAU,gBAAgBC,QAASrB,EAA3C,uBACA,wBAAQoB,UAAU,gBAAgBC,QAASP,EAA3C,sBAEF,gCACE,sBAAKM,UAAU,WAAf,UACE,wBAAQA,UAAU,UAAlB,8BACA,sBAAKA,UAAU,mBAAmBR,MAAO,CAACU,MAAM,IAAhD,UACE,8BAAK,wBAAQF,UAAU,kBAAkBC,QAAS,kBAAMF,EAAY,QAA/D,mBACL,8BAAK,wBAAQC,UAAU,kBAAkBC,QAAS,kBAAMF,EAAY,QAA/D,mBACL,8BAAK,wBAAQC,UAAU,kBAAkBC,QAAS,kBAAMF,EAAY,gBAA/D,iCAGP,sBAAKC,UAAU,WAAf,UACE,wBAAQA,UAAU,UAAlB,2BACA,sBAAKA,UAAU,mBAAmBR,MAAO,CAACW,KAAK,IAA/C,UACE,8BAAK,wBAAQH,UAAU,sBACvB,8BAAK,wBAAQA,UAAU,sBACvB,8BAAK,wBAAQA,UAAU,sBACvB,8BAAK,wBAAQA,UAAU,kCA8DlBI,MA5Bf,WACE,OACE,sBAAKJ,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAaK,GAAG,WAAlC,UAGA,oBAAIL,UAAU,UAAd,wCAGA,oBAAIA,UAAU,WAAd,0CAKA,sBAAMA,UAAU,WAAWK,GAAG,SAA9B,SAGCT,UC5JQU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SAM1BgB,K","file":"static/js/main.ae0a2f68.chunk.js","sourcesContent":["import React, { Reducer, useState } from 'react';\n\nimport './App.css';\n\n\n\n\n\n\n//TODO add function here to find appropriate values\n\n//TODO add image of color picker\n\n\n\nfunction randomize(){\n  //outputs a random 6 digit string with # in front to make randomized hex code\n  const randColor = \"#\" + Math.floor(Math.random()*16777215).toString(16);\n  //alert(randomColor);\n\n  return randColor;\n}\n\n\nfunction insertRandomColor(){\n  //calls randomize() then inserts into correct body <div>\n  const insertColor = randomize();\n  \n  //alert(insertColor);\n  console.log(insertColor);\n\n  const getHeaderElem = document.getElementById('headerID')!;\n  const getBodyElem = document.getElementById('bodyID')!;\n\n  getHeaderElem.style.backgroundColor = insertColor;\n  getBodyElem.style.backgroundColor = insertColor;\n\n  //RBGTextChange();\n  return insertColor;\n}\n//TODO make function that sees what version the website is in (RBG or HEX),\n  //then chooses correct function to display text\n\n\nfunction resetColor() {\n  const getBodyElem = document.getElementById('bodyID')!;\n  const getHeaderElem = document.getElementById('headerID')!;\n  //console.log(getBodyElem.style.backgroundColor);\n\n  //TODO fix this alert. console prints rbg values, not sure why\n  if (getBodyElem.style.backgroundColor === \"#123456\"){\n    alert(\"Default site color is already selected.\")\n  }\n  \n  getBodyElem.style.backgroundColor = \"#123456\";\n  getHeaderElem.style.backgroundColor = \"#123456\";\n}\n\nfunction RGBselection(red:number,green:number,blue:number){\n  const [selec, setSelec] = useState(0);\n  \n\n  return(\n  <form>\n  <p>\n    Red:\n    <input type=\"text\" name=\"name\" />\n  </p>\n  <p>\n    Green:\n    <input type=\"text\" name=\"name\" />\n  </p>\n  <p>\n    Blue:\n    <input type=\"text\" name=\"name\" />\n  </p>\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n  );\n}\n\n\nfunction ColorValSelection() {\n  const [colorVal, setColorVal] = useState('');\n\n  if(colorVal === 'Hex'){\n\n    \n  }\n  else if(colorVal === 'RGB'){\n    //RGBselection(0,0,0);\n  }\n  else if(colorVal === 'Color Wheel'){\n\n  }\n\n\n  return (\n<div>\n  <h2 className=\"h2title2\">Selected Color Type: {colorVal}</h2>\n  <div>\n    <button className=\"button-action\" onClick={insertRandomColor}>Randomize</button>\n    <button className=\"button-action\" onClick={resetColor}>Reset</button>\n  </div>\n  <div>\n    <div className=\"dropdown\">\n      <button className=\"dropbtn\">Customize Colors</button>\n      <div className=\"dropdown-content\" style={{right:10}}>\n        <div><button className=\"custom-drop-btn\" onClick={() => setColorVal('Hex')}>Hex</button></div>\n        <div><button className=\"custom-drop-btn\" onClick={() => setColorVal('RGB')}>RGB</button></div>\n        <div><button className=\"custom-drop-btn\" onClick={() => setColorVal('Color Wheel')}>Color Wheel</button></div>\n      </div>\n    </div>\n      <div className=\"dropdown\">\n        <button className=\"dropbtn\">Color History</button>\n        <div className=\"dropdown-content\" style={{left:10}}>\n          <div><button className=\"custom-drop-btn\"></button></div>\n          <div><button className=\"custom-drop-btn\"></button></div>\n          <div><button className=\"custom-drop-btn\"></button></div>\n          <div><button className=\"custom-drop-btn\"></button></div>\n        </div>\n      </div>\n  </div>\n</div>\n  );\n}\n\n\n\n\nfunction headerSet(count: number) {\n  var headerText = ''; \n\n  if(count === 1){\n    headerText = 'Color Formatting Selected: #';\n\n  }\n  else if(count === 2){\n    headerText = 'Color Formatting Selected: RGB';\n\n  }\n  else if(count === 3){\n    headerText = 'Color Formatting Selected: Color Wheel';\n\n  }\n  // Similar to componentDidMount and componentDidUpdate:  useEffect(() => {    // Update the document title using the browser API    document.title = `You clicked ${count} times`;  });\n  return headerText;\n}\n\n\n//TODO add correct color appearing and changing\n//TODO if RGB mode use, if hex mode use, etc for h2 and other relevant parts\n//TODO customize dropdown buttons\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" id=\"headerID\">\n\n     \n      <h1 className=\"h1title\"> Background Color Selector</h1>\n      \n      \n      <h2 className=\"h2title2\">Colors: R: __ G: __ B: __</h2>\n\n      </header>\n\n      \n      <body className=\"App-body\" id=\"bodyID\">\n\n\n      {ColorValSelection()}\n      \n\n      </body>\n\n    </div>\n\n   \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}